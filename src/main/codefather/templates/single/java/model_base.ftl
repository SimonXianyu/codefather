package ${packageName};
/*
* This file is generated by codefather plugin. Don't modify this file.
* If want to extends properties, modify the sub class.
*/

<#include '../../inc-java-type.ftl' />

<#assign has_date = false />
<#list entity.propertyList as prop>
    <#if prop.type == 'date'><#assign has_date=true /></#if>
</#list>
import javax.persistence.*;
<#if has_date>
import java.util.Date;
import org.springframework.format.annotation.DateTimeFormat;
</#if>
<#if entity.singleKey && entity.keyDef.generated>import com.iteye.dwangel.util.AutoIdModel;</#if>

@MappedSuperclass
public class ${entity.name}Base
    <#if entity.singleKey && entity.keyDef.generated>extends AutoIdModel</#if>
{
<#--<#list entity.propertyList as prop>-->
    <#--<#if !prop.key>-->
    <#--public static final String COL_${prop.name?upper_case} = "${prop.camelName}";-->
    <#--</#if>-->
<#--</#list>-->

<#if entity.singleKey>
<#if !entity.keyDef.generated>
    protected  <@out_java_type entity.keyDef.type /> ${entity.keyDef.camelName};
</#if>
<#else>
    @EmbeddedId
    protected ${entity.name}PK key;
</#if>

<#list entity.propertyList as property>
    <#if !property.key>
    protected <@out_java_type property.type /> ${property.camelName}<#switch property.type>
        <#case 'boolean'><#if property.attrMap['default']?exists>
=${ (property.attrMap['default'] == 'true')?string('Boolean.TRUE','Boolean.FALSE')}</#if><#break >
        <#case 'string'><#if property.attrMap['default']?exists>="${property.attrMap['default']}"</#if><#break>
        <#case 'int'><#if property.attrMap['default']?exists>=${property.attrMap['default']}</#if><#break>
        <#case 'long'><#if property.attrMap['default']?exists>=${property.attrMap['default']}<#t />
            <#t /><#if !property.attrMap['default']?ends_with('l')>l</#if></#if><#break>
    <#lt /></#switch>;
    </#if>
</#list>

    public ${entity.name}Base() {
    }

    public ${entity.name}Base(${entity.name}Base other) {
<#if entity.singleKey>
<#if entity.keyDef.generated>
        this.id = other.id;
<#else>
        this.${entity.keyDef.camelName} = other.${entity.keyDef.camelName};
</#if>
<#else>
        this.key = new  ${entity.name}PK(other.key);
</#if>
<#list entity.propertyList as property>
<#if !property.key>
        this.${property.camelName} = other.${property.camelName};
</#if>
</#list>
    }

    public ${entity.name}Base createBase() {
        return new ${entity.name}Base(this);
    }

//  Getters/Setters

<#if entity.singleKey>
<#if entity.keyDef.generated>
    // Use super method
<#else>
    @Id
    @Column(name="${entity.keyDef.name}")
<#if entity.keyDef.generated>
    <#if generateStrategy = 'auto'>
    @GeneratedValue(strategy=GenerationType.AUTO)
    <#elseif generateStrategy="sequence">
    @GeneratedValue(strategy=GenerationType.SEQUENCE, generator = "seq_${entity.name?lower_case}")
    @SequenceGenerator(name = "seq_${entity.name?lower_case}" , sequenceName="seq_${entity.name?lower_case}")
    <#elseif generateStrategy="identity">
    @GeneratedValue(strategy=GenerationType.IDENTITY)
    </#if>
</#if>
    public <@out_java_type entity.keyDef.type /> get${entity.keyDef.camelName?cap_first}() {
        return this.${entity.keyDef.camelName};
    }
    public void set${entity.keyDef.camelName?cap_first}(<@out_java_type entity.keyDef.type /> val) {
        this.${entity.keyDef.camelName} = val;
    }
</#if>
<#else>
    public ${entity.name}PK getKey() {
        return this.key;
    }
    public void setKey(${entity.name}PK key) {
        this.key = key;
    }
</#if>

<#list entity.propertyList as property>
    <#if !property.key>
    <#if property.type=='text'>@Lob</#if>
    @Column(name="${property.name}"<#rt />
        <#t /><#if property.attrMap['length']??>,length=${property.attrMap['length']}</#if>
    <#t /><#if property.attrMap['nullable']! == 'false'>,nullable=false</#if><#if property.attrMap['unique']! =='true'>,unique=true</#if>
<#lt />)
    <#if property.attrMap['dateFormat']??>@DateTimeFormat(pattern="${property.attrMap['dateFormat']}")</#if>
    public <@out_java_type property.type /> get${property.camelName?cap_first}() {
    <#if property.type == 'date'>
        if ( null != this.${property.camelName} ) {
            return new Date(this.${property.camelName}.getTime());
        } else {
            return null;
        }
    <#else>
        return this.${property.camelName};
    </#if>
    }
    public void set${property.camelName?cap_first}(<@out_java_type property.type /> val) {
    <#if property.type == 'date'>
        if (val != null) {
            this.${property.camelName} = new Date(val.getTime());
        } else {
            this.${property.camelName} = null;
        }
    <#else>
        this.${property.camelName} = val;
    </#if>
    }
    </#if>
</#list>
}